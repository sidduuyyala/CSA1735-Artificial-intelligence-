import copy
from heapq import heappush, heappop

n = 3

rows = [1, 0, -1, 0]
cols = [0, -1, 0, 1]

class PriorityQueue:
    def __init__(self):
        self.heap = []

    def push(self, key):
        heappush(self.heap, key)

    def pop(self):
        return heappop(self.heap)

    def empty(self):
        return not bool(self.heap)

class Node:
    def __init__(self, parent, matrix, empty_tile_pos, costs, levels):
        self.parent = parent
        self.matrix = matrix
        self.empty_tile_pos = empty_tile_pos
        self.costs = costs
        self.levels = levels

    def __lt__(self, other):
        return self.costs < other.costs

def calculateCosts(matrix, final):
    count = 0
    for i in range(n):
        for j in range(n):
            if matrix[i][j] and matrix[i][j] != final[i][j]:
                count += 1
    return count

def newNodes(matrix, empty_tile_pos, new_empty_tile_pos, levels, parent, final):
    new_matrix = copy.deepcopy(matrix)
    x1, y1 = empty_tile_pos
    x2, y2 = new_empty_tile_pos
    new_matrix[x1][y1], new_matrix[x2][y2] = new_matrix[x2][y2], new_matrix[x1][y1]
    costs = calculateCosts(new_matrix, final)
    new_node = Node(parent, new_matrix, new_empty_tile_pos, costs, levels)
    return new_node


def printMatrix(matrix):
    for i in range(n):
        for j in range(n):
            print("%d " % (matrix[i][j]), end=" ")
        print()


def isSafe(x, y):
    return 0 <= x < n and 0 <= y < n


def printPath(root):
    if root is None:
        return
    printPath(root.parent)
    printMatrix(root.matrix)
    print()


def solve(initial, empty_tile_pos, final):
    pq = PriorityQueue()
    costs = calculateCosts(initial, final)
    root = Node(None, initial, empty_tile_pos, costs, 0)
    pq.push(root)

    while not pq.empty():
        minimum = pq.pop()

        if minimum.costs == 0:
            print("Solution:")
            printPath(minimum)
            return

        for i in range(n):
            new_tile_pos = [
                minimum.empty_tile_pos[0] + rows[i],
                minimum.empty_tile_pos[1] + cols[i],
            ]

            if isSafe(new_tile_pos[0], new_tile_pos[1]):
                child = newNodes(
                    minimum.matrix,
                    minimum.empty_tile_pos,
                    new_tile_pos,
                    minimum.levels + 1,
                    minimum,
                    final,
                )
                pq.push(child)


initial = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]
final = [[1, 2, 3], [5, 8, 6], [0, 7, 4]]
empty_tile_pos = [1, 2]

solve(initial, empty_tile_pos, final)
